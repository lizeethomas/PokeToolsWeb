@using PokéToolsWeb.Models

<div class="card"
     id="@Pokemon.Dex"
    @onclick="@(() => OnClick.InvokeAsync(Pokemon))"
    @onmouseover="@(() => StartHover.InvokeAsync(Pokemon))"
    @onmouseout="@((e) => CancelHover.InvokeAsync(e))"
    @onmousemove="UpdateMousePosition">
    <img src="@Pokemon.IconUrl" alt="@Pokemon.Name" />
    @if (HasResistanceModifyingAbility(Pokemon))
    {
        <span class="alert-icon" title="Ce Pokémon a un talent modifiant ses résistances">⚠️</span>
    }
</div>

@code {
    [Parameter] public Pokemon Pokemon { get; set; }
    [Parameter] public EventCallback<Pokemon> OnClick { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CancelHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }

    private static readonly HashSet<string> ResistanceModifyingAbilities = new(StringComparer.OrdinalIgnoreCase)
    {
        "levitate", "earth-eater",
        "dry-skin", "water-absorb", "storm-drain",
        "sap-sipper",
        "lightning-rod", "volt-absorb", "motor-drive",
        "wonder-guard",
        "solid-rock", "filter", "prism-armor"
    };

    private bool HasResistanceModifyingAbility(Pokemon p)
    {
        var allAbilities = new List<string>(p.Abilities);
        if (!string.IsNullOrWhiteSpace(p.HiddenAbility))
            allAbilities.Add(p.HiddenAbility);

        return allAbilities.Any(a => ResistanceModifyingAbilities.Contains(a));
    }
}
