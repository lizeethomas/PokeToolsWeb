@using PokéToolsWeb.Models


<div class="team">
    <h3>Team (@(Team.Count().ToString())/6)</h3>
    <div class="mini-team full-team-preview">
        @for (int i = 0; i < 6; i++)
        {
            if (i < Team.Count)
            {
                <div class="team-slot">
                    <PokemonCard Pokemon="@Team[i]"
                                 CancelHover="HandleCancel"
                                 OnClick="HandleClick"
                                 StartHover="HandleHover"
                                 UpdateMousePosition="HandleMouse">
                    </PokemonCard>

                    <div class="info-below-card">
                        <div class="info-name">@Team[i].Name</div>

                        <div class="info-types">
                            <span class="tb-type-icon @GetTypeClass(Team[i].Type1)">@Team[i].Type1</span>
                            @if (!string.IsNullOrEmpty(Team[i].Type2) && Team[i].Type2 != "None")
                            {
                                <span class="tb-type-icon @GetTypeClass(Team[i].Type2)">@Team[i].Type2</span>
                            }
                        </div>

                        <div class="info-talents">
                            @foreach (var ability in Team[i].Abilities)
                            {
                                <span class="talent-badge">@FormatAbilityName(ability)</span>
                            }
                            @if (!string.IsNullOrWhiteSpace(Team[i].HiddenAbility))
                            {
                                <span class="talent-badge hidden">@FormatAbilityName(Team[i].HiddenAbility)</span>
                            }
                        </div>

                        <div class="team-table">
                            <span><strong>HP</strong> @Team[i].HP</span>
                            <span><strong>Atk</strong> @Team[i].Attack</span>
                            <span><strong>Def</strong> @Team[i].Defense</span>
                            <span><strong>SpA</strong> @Team[i].SpAtk</span>
                            <span><strong>SpD</strong> @Team[i].SpDef</span>
                            <span><strong>Spe</strong> @Team[i].Speed</span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="team-slot empty-slot">
                    <span><img src="https://tinyurl.com/mrw7z944" /></span>
                </div>
            }
        }
    </div>

</div>


@code {
    [Parameter] public List<Pokemon> Team { get; set; } = new();
    [Parameter] public EventCallback<Pokemon> OnPokemonDeselected { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CancelHover { get; set; }

    private string ImgUrl = "https://tinyurl.com/mrw7z944";

    private async Task HandleClick(Pokemon p) => await OnPokemonDeselected.InvokeAsync(p);
    private async Task HandleHover(Pokemon p) => await StartHover.InvokeAsync(p);
    private async Task HandleMouse(MouseEventArgs e) => await UpdateMousePosition.InvokeAsync(e);
    private async Task HandleCancel(MouseEventArgs e) => await CancelHover.InvokeAsync(e);

    private string GetTypeClass(string type)
    {
        if (string.IsNullOrEmpty(type))
        {
            return $"tb-no-type";
        }
        else
        {
            return $"tb-type-{type.ToLower()}";
        }

    }

    private string FormatAbilityName(string ability)
    {
        if (string.IsNullOrWhiteSpace(ability)) return "";
        return string.Join(" ", ability.Split('-')
            .Select(word => char.ToUpper(word[0]) + word[1..]));
    }

}