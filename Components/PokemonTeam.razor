@using PokéToolsWeb.Models


<div class="team">
    <h3>Team (@(Team.Count().ToString())/6)</h3>
    <div class="mini-team fixed-team">
        @for (int i = 0; i < 6; i++)
        {
            if (i < Team.Count)
            {
                <PokemonCard Pokemon="@Team[i]"
                             CancelHover="HandleCancel"
                             OnClick="HandleClick"
                             StartHover="HandleHover"
                             UpdateMousePosition="HandleMouse">
                </PokemonCard>
            }
            else
            {
                <div class="card empty-slot">
                    <span><img src="https://tinyurl.com/mrw7z944" /></span>
                </div>
            }
        }
    </div>
    <div class="team-infos">
        @if (Team.Any())
        {
            @foreach (var p in Team)
            {
                <div class="team-pokemon-info">
                    <div class="info-name">@p.Name</div>
                    <div class="info-types">
                        <span class="tb-type-icon @GetTypeClass(p.Type1)">@p.Type1</span>
                        @if (!string.IsNullOrEmpty(p.Type2) && p.Type2 != "None")
                        {
                            <span class="tb-type-icon @GetTypeClass(p.Type2)">@p.Type2</span>
                        }
                    </div>
                    <div class="talents">
                        @($"{string.Join(", ", p.Abilities)}, {p.HiddenAbility}")
                    </div>
                    <div class="team-table">
                        <span><strong>HP</strong> @p.HP</span>
                        <span><strong>Atk</strong> @p.Attack</span>
                        <span><strong>Def</strong> @p.Defense</span>
                        <span><strong>SpA</strong> @p.SpAtk</span>
                        <span><strong>SpD</strong> @p.SpDef</span>
                        <span><strong>Spe</strong> @p.Speed</span>
                    </div>
                </div>
            }
        }
    </div>

</div>


@code {
    [Parameter] public List<Pokemon> Team { get; set; } = new();
    [Parameter] public EventCallback<Pokemon> OnPokemonDeselected { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CancelHover { get; set; }

    private string ImgUrl = "https://tinyurl.com/mrw7z944";

    private async Task HandleClick(Pokemon p) => await OnPokemonDeselected.InvokeAsync(p);
    private async Task HandleHover(Pokemon p) => await StartHover.InvokeAsync(p);
    private async Task HandleMouse(MouseEventArgs e) => await UpdateMousePosition.InvokeAsync(e);
    private async Task HandleCancel(MouseEventArgs e) => await CancelHover.InvokeAsync(e);

    private string GetTypeClass(string type)
    {
        if (string.IsNullOrEmpty(type))
        {
            return $"tb-no-type";
        }
        else
        {
            return $"tb-type-{type.ToLower()}";
        }

    }

}