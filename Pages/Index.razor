@page "/"
@inject HttpClient Http
@using PokéToolsWeb.Models
@using PokéToolsWeb.Components
@using PokéToolsWeb.Components.Stats
@using PokéToolsWeb.Components.Filters
@using PokéToolsWeb.Components.Chart

<div class="header-bar">
    <img src="https://www.pokepedia.fr/images/0/01/Porygon-RFVF.png?20200407174707" />
    <h1><span class="poke">Poké</span><span class="tool">Tool</span></h1>
    <input type="text"
           class="search-box"
           placeholder="Type a pokemon name..."
    @bind="SearchText"
    @bind:event="oninput" />
</div>

@if (pokemons is null)
{
    <p>Loading...</p>
}
else
{
    <div class="filters">

        <TypeFilter AvailableTypes="availableTypes"
                    SelectedTypes="selectedTypes"
                    OnToggleType="@(type => ToggleTypeFilter(type, !selectedTypes.Contains(type)))"
                    OnClearTypes="ClearAllTypes"
                    GetTypeClass="GetTypeClass" />

        <GenFilter AvailableGens="availableGens"
                   SelectedGens="selectedGens"
                   OnToggleGen="@(gen => ToggleGenFilter(gen, !selectedGens.Contains(gen)))"
                   OnSelectAll="SelectAllGens"
                   OnClearAll="ClearAllGens" />

    </div>

    <div class="page-layout">

        <div class="left-panel">
            <PokemonTeam Team="team"
                         OnPokemonDeselected="OnPokemonDeselected"
                         StartHover="StartHover"
                         CancelHover="CancelHover"
                         UpdateMousePosition="UpdateMousePosition" />
        </div>

        <div class="right-panel">
            <Pokedex Pokemons="pokemons"
                     CurrentPage="currentPage"
                     TotalPages="totalPages"
                     PreviousPage="PreviousPage"
                     NextPage="NextPage"
                     OnPokemonSelected="OnPokemonSelected"
                     StartHover="StartHover"
                     CancelHover="CancelHover"
                     UpdateMousePosition="UpdateMousePosition" />
        </div>

    </div>

    @if (team.Any())
    {
        <TypeChart pokemons="@(team)"
                   teamDefensiveTypeCharts="@(teamDefensiveTypeCharts)">
        </TypeChart>
    }

    <div id="popup-layer">

        @if (hoveredPokemon is not null)
        {
            <Stats pokemon="hoveredPokemon"
                   topPx="@popupTopPx"
                   leftPx="@popupLeftPx"
                   typeClass="GetTypeClass">
            </Stats>
        }

    </div>
}

@code {
    private List<Pokemon> allPokemons = new();
    private List<Pokemon> pokemons = new();
    private List<Pokemon> team = new();

    private List<Ability> allAbilities = new();

    private List<Dictionary<string, double>> teamDefensiveTypeCharts = new();

    private HashSet<string> selectedTypes = new();
    private List<string> availableTypes = new();
    private HashSet<int> selectedGens = new();
    private List<int> availableGens = Enumerable.Range(1, 9).ToList();

    private string searchText = string.Empty;
    private string SearchText
    {
        get => searchText;
        set
        {
            if (searchText != value)
            {
                searchText = value;
                currentPage = 1;
                ApplyFilters();
            }
        }
    }

    private Pokemon? hoveredPokemon;
    private bool showPopup = false;
    private Timer? hoverTimer;
    private string popupTopPx = "0px";
    private string popupLeftPx = "0px";

    private int currentPage = 1;
    private const int pageSize = 60; 
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        allPokemons = await Http.GetFromJsonAsync<List<Pokemon>>("https://localhost:7206/api/Pokemons") ?? new List<Pokemon>();

        allAbilities = await Http.GetFromJsonAsync<List<Ability>>("https://localhost:7206/api/Abilities") ?? new List<Ability>();

        availableTypes = allPokemons
            .SelectMany(p => new[] { p.Type1, p.Type2 })
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        selectedGens = new HashSet<int>(availableGens);

        ApplyFilters();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {

        }
    }

    private void StartHover(Pokemon p)
    {
        CancelHover(); 
        hoverTimer = new Timer(_ =>
        {
            hoveredPokemon = p;
            showPopup = true;
            InvokeAsync(StateHasChanged);
        }, null, 400, Timeout.Infinite); 
    }

    private void CancelHover()
    {
        hoverTimer?.Dispose();
        hoverTimer = null;
        hoveredPokemon = null;
        showPopup = false;
        StateHasChanged();
    }

    private void UpdateMousePosition(MouseEventArgs e)
    {
        popupLeftPx = $"{e.ClientX + 15}px";
        popupTopPx = $"{e.ClientY + 15}px";

        if (showPopup)
        {
            StateHasChanged();
        }
    }

    private async Task OnPokemonSelected(Pokemon p)
    {
        if(team.Count() < 6)
        {
            allPokemons.Remove(p);
            await GetDefensiveTypeChart(p.Dex);
            if(p.Abilities.Any(a => a == "levitate"))
            {
                teamDefensiveTypeCharts.Last()["Ground"] = 0.0;
            }
            team.Add(p);
            CancelHover();
            ApplyFilters();
            StateHasChanged();
        }
    }

    private void OnPokemonDeselected(Pokemon p)
    {
        var index = team.IndexOf(p);
        if (index >= 0)
        {
            team.RemoveAt(index);
            teamDefensiveTypeCharts.RemoveAt(index);
        }
        allPokemons.Add(p);
        allPokemons = allPokemons.OrderBy(pkm => pkm.Dex).ToList();
        CancelHover();
        ApplyFilters();
        StateHasChanged();
    }

    private void ClearTeam()
    {
        team.Clear();
        teamDefensiveTypeCharts.Clear();
    }

    private async Task GetDefensiveTypeChart(int dex)
    {
        teamDefensiveTypeCharts.Add(await Http.GetFromJsonAsync<Dictionary<string, double>>($"https://localhost:7206/api/Type/defensiveByDex/{dex}") ?? new Dictionary<string, double>());
    }

    string GetTypeClass(string type)
    {
        if(string.IsNullOrEmpty(type))
        {
            return $"tb-no-type";
        } 
        else
        {
            return $"tb-type-{type.ToLower()}";
        }
        
    }

    private void ToggleTypeFilter(string type, bool isChecked)
    {
        if (isChecked)
        {
            if (selectedTypes.Count < 2)
                selectedTypes.Add(type);
        }
        else
        {
            selectedTypes.Remove(type);
        }

        ApplyFilters();
    }

    private void ClearAllTypes()
    {
        selectedTypes.Clear();
        ApplyFilters();
    }

    private void ToggleGenFilter(int gen, bool isChecked)
    {
        if (isChecked)
            selectedGens.Add(gen);
        else
            selectedGens.Remove(gen);

        ApplyFilters();
    }

    private void ClearAllGens()
    {
        selectedGens.Clear();
        ApplyFilters();
    }

    private void SelectAllGens()
    {
        selectedGens = new HashSet<int>(availableGens);
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        IEnumerable<Pokemon> filtered = allPokemons;

        if (selectedTypes.Count == 1)
        {
            var type = selectedTypes.First();
            filtered = filtered.Where(p => p.Type1 == type || p.Type2 == type);
        }
        else if (selectedTypes.Count == 2)
        {
            var typePair = selectedTypes.ToHashSet();
            filtered = filtered.Where(p =>
            {
                var pokemonTypes = new HashSet<string> { p.Type1, p.Type2 };
                return pokemonTypes.SetEquals(typePair);
            });
        }

        if (selectedGens.Count > 0)
        {
            filtered = filtered.Where(p => selectedGens.Contains(p.Gen));
        }
        else
        {
            filtered = Enumerable.Empty<Pokemon>();
        }

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filtered = filtered.Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) || p.Nom.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        var filteredList = filtered.ToList();

        totalPages = (int)Math.Ceiling(filteredList.Count / (double)pageSize);
        if (currentPage > totalPages)
            currentPage = totalPages > 0 ? totalPages : 1;

        pokemons = filteredList
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyFilters();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyFilters();
            StateHasChanged();
        }
    }


}
