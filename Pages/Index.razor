@page "/"
@inject HttpClient Http
@using PokéToolsWeb.Models
@using PokéToolsWeb.Components

<h1>Pokémon Viewer</h1>

@if (pokemons is null)
{
    <p>Chargement...</p>
}
else
{
    <div class="filters">
        <div>
            <h3>Filtrer par type :</h3>
            <button @onclick="ClearAllTypes">Tout déselectionner</button>
        </div>
        <div class="type-checkboxes">
            @foreach (var type in availableTypes)
            {
                <label>
                    <input type="checkbox"
                           checked="@selectedTypes.Contains(type)"
                    @onchange="e => ToggleTypeFilter(type, (bool)e.Value)"
                           disabled="@(selectedTypes.Count >= 2 && !selectedTypes.Contains(type))" />
                    @type
                </label>
            }
        </div>
        

        <h3>Filtrer par génération :</h3>
        <button @onclick="SelectAllGens">Tout sélectionner</button>
        <div class="gen-checkboxes">
            @foreach (var gen in availableGens)
            {
                <label>
                    <input type="checkbox"
                           checked="@selectedGens.Contains(gen)"
                    @onchange="e => ToggleGenFilter(gen, (bool)e.Value)" />
                    Gen @gen
                </label>
            }
        </div>
        <button @onclick="ClearAllGens">Tout déselectionner</button>
    </div>

    <div class="page-layout">
        <div class="left-panel">
            <div class="pokemon-panel">
                <div class="card-container">
                    @foreach (var pokemon in pokemons)
                    {
                        <PokemonCard Pokemon="@pokemon"
                            CancelHover="CancelHover"
                            OnClick="OnPokemonSelected"
                            StartHover="StartHover"
                            UpdateMousePosition="UpdateMousePosition">
                        </PokemonCard>
                    }
                </div>
            </div>
            <div class="pagination-controls">
                <button @onclick="PreviousPage" disabled="@(currentPage <= 1)">Page précédente</button>
                <span>Page @currentPage sur @totalPages</span>
                <button @onclick="NextPage" disabled="@(currentPage >= totalPages)">Page suivante</button>
            </div>
        </div>
        <div class="right-panel">
            <div class="team-panel">
                <h3>Team (@($"{team.Count()}/6"))</h3>
                <ul>
                    @foreach (var pokemon in team)
                    {
                        <PokemonCard Pokemon="@pokemon"
                            CancelHover="CancelHover"
                            OnClick="OnPokemonDeselected"
                            StartHover="StartHover"
                            UpdateMousePosition="UpdateMousePosition">
                        </PokemonCard>
                    }
                </ul>
            </div>
            <div class="chart-panel">
                @if(availableTypes.Any())
                {
                    @foreach(var t in availableTypes)
                    {
                        <p>@($"{t} : {0}")</p>
                    }
                }
            </div>
        </div>
    </div>

    /*
    <div>
        @if(team.Any())
        {
            <TypeChart pokemon="@(team.First())" defensiveTypeChart="@(teamDefensiveTypeCharts.First())"></TypeChart>
        }
    </div>
    */

    @if (hoveredPokemon != null && showPopup)
    {
        <PopUp leftPx="@popupLeftPx" topPx="@popupTopPx" pokemon="@hoveredPokemon"/>
    }
}

@code {
    private List<Pokemon> allPokemons = new();
    private List<Pokemon> pokemons = new();
    private List<Pokemon> team = new();

    private List<DefensiveTypeChart> teamDefensiveTypeCharts = new();
    private Dictionary<string, double> teamDefensiveTypeChart = new();

    private HashSet<string> selectedTypes = new();
    private List<string> availableTypes = new();
    private HashSet<int> selectedGens = new();
    private List<int> availableGens = Enumerable.Range(1, 9).ToList();

    private Pokemon? hoveredPokemon;
    private bool showPopup = false;
    private Timer? hoverTimer;
    private string popupTopPx = "0px";
    private string popupLeftPx = "0px";

    private int currentPage = 1;
    private const int pageSize = 66; 
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        allPokemons = await Http.GetFromJsonAsync<List<Pokemon>>("https://localhost:7206/api/Pokemons") ?? new List<Pokemon>();

        availableTypes = allPokemons
            .SelectMany(p => new[] { p.Type1, p.Type2 })
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        selectedGens = new HashSet<int>(availableGens);

        ApplyFilters();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            availableTypes.ForEach(t =>
            {
                teamDefensiveTypeChart.Add(t, 0);
            });
        }
    }

    private void StartHover(Pokemon p)
    {
        CancelHover(); 
        hoverTimer = new Timer(_ =>
        {
            hoveredPokemon = p;
            showPopup = true;
            InvokeAsync(StateHasChanged);
        }, null, 400, Timeout.Infinite); 
    }

    private void CancelHover()
    {
        hoverTimer?.Dispose();
        hoverTimer = null;
        hoveredPokemon = null;
        showPopup = false;
        StateHasChanged();
    }

    private void UpdateMousePosition(MouseEventArgs e)
    {
        popupLeftPx = $"{e.ClientX + 15}px";
        popupTopPx = $"{e.ClientY + 15}px";

        if (showPopup)
        {
            StateHasChanged();
        }
    }

    private async Task OnPokemonSelected(Pokemon p)
    {
        if(team.Count() < 6)
        {
            allPokemons.Remove(p);
            await GetDefensiveTypeChart(p.Dex);
            team.Add(p);
            CancelHover();
            ApplyFilters();
            StateHasChanged();
        }
    }

    private void OnPokemonDeselected(Pokemon p)
    {
        team.Remove(p);
        allPokemons.Add(p);
        allPokemons = allPokemons.OrderBy(pkm => pkm.Dex).ToList();
        CancelHover();
        ApplyFilters();
        StateHasChanged();
    }

    private async Task GetDefensiveTypeChart(int dex)
    {
        teamDefensiveTypeCharts.Add(await Http.GetFromJsonAsync<DefensiveTypeChart>($"https://localhost:7206/api/Type/defense/{dex}") ?? new DefensiveTypeChart());
    }

    private void EvaluateTeamDefensiveTypeChart()
    {

    }


    private void ToggleTypeFilter(string type, bool isChecked)
    {
        if (isChecked)
        {
            if (selectedTypes.Count < 2)
                selectedTypes.Add(type);
        }
        else
        {
            selectedTypes.Remove(type);
        }

        ApplyFilters();
    }

    private void ClearAllTypes()
    {
        selectedTypes.Clear();
        ApplyFilters();
    }

    private void ToggleGenFilter(int gen, bool isChecked)
    {
        if (isChecked)
            selectedGens.Add(gen);
        else
            selectedGens.Remove(gen);

        ApplyFilters();
    }

    private void ClearAllGens()
    {
        selectedGens.Clear();
        ApplyFilters();
    }

    private void SelectAllGens()
    {
        selectedGens = new HashSet<int>(availableGens);
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        IEnumerable<Pokemon> filtered = allPokemons;

        if (selectedTypes.Count == 1)
        {
            var type = selectedTypes.First();
            filtered = filtered.Where(p => p.Type1 == type || p.Type2 == type);
        }
        else if (selectedTypes.Count == 2)
        {
            var typePair = selectedTypes.ToHashSet();
            filtered = filtered.Where(p =>
            {
                var pokemonTypes = new HashSet<string> { p.Type1, p.Type2 };
                return pokemonTypes.SetEquals(typePair);
            });
        }

        if (selectedGens.Count > 0)
        {
            filtered = filtered.Where(p => selectedGens.Contains(p.Gen));
        }
        else
        {
            filtered = Enumerable.Empty<Pokemon>();
        }

        var filteredList = filtered.ToList();

        totalPages = (int)Math.Ceiling(filteredList.Count / (double)pageSize);
        if (currentPage > totalPages)
            currentPage = totalPages > 0 ? totalPages : 1;

        pokemons = filteredList
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyFilters();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyFilters();
            StateHasChanged();
        }
    }


}
